import React, {useRef, useEffect} from 'react'
import './slide.css'

const Slide = () => {
 
  const refBox = useRef(null);
  const refTop = useRef(null);
  const refRight = useRef(null);
  const refBottom = useRef(null);
  const refLeft = useRef(null);

  useEffect(() => {
     const resizeableElement = refBox.current;
     const styles = window.getComputedStyle(resizeableElement)
     let width = parseInt(styles.width, 10)
     let height = parseInt(styles.height, 10)
     
     let xCord = 0;
     let yCord = 0;

     resizeableElement.style.top = "150px";
     resizeableElement.style.left = "150px";

     //Top

     const onMouseMoveTopResize = (event) => {
      const dy =  event.clientY - yCord;
      height = height - dy;
      yCord = event.clientY;
      resizeableElement.style.height = `${height}px`;
     }

     const onMouseUpTopResize = (event) => {
      document.removeEventListener("mousemove", onMouseMoveTopResize);
     }

     const onMouseDownTopResize = (event) => {
      yCord = event.clientY;
      const styles = window.getComputedStyle(resizeableElement);
      resizeableElement.style.bottom = styles.bottom;
      resizeableElement.style.top = null;
      document.addEventListener("mousemove", onMouseMoveTopResize)
      document.addEventListener("mouseup", onMouseUpTopResize)
     }

     // Right

     const onMouseMoveRightResize = (event) => {
      const dx =  event.clientX - xCord;
      xCord = event.clientX;
      width = width + dx;
      resizeableElement.style.width = `${width}px`;
     }

     const onMouseUpRightResize = (event) => {
      document.removeEventListener("mousemove", onMouseMoveRightResize);
     }

     const onMouseDownRightResize = (event) => {
      xCord = event.clientX;
      const styles = window.getComputedStyle(resizeableElement);
      resizeableElement.style.left = styles.left;
      resizeableElement.style.right = null;
      document.addEventListener("mousemove", onMouseMoveRightResize)
      document.addEventListener("mouseup", onMouseUpRightResize)
     }


     // Bottom

     const onMouseMoveBottomResize = (event) => {
      const dy =  event.clientY - yCord;
      height = height + dy;
      yCord = event.clientY;
      resizeableElement.style.height = `${height}px`;
     }

     const onMouseUpBottomResize = (event) => {
      document.removeEventListener("mousemove", onMouseMoveBottomResize);
     }

     const onMouseDownBottomResize = (event) => {
      yCord = event.clientY;
      const styles = window.getComputedStyle(resizeableElement);
      resizeableElement.style.top = styles.top;
      resizeableElement.style.bottom = null;
      document.addEventListener("mousemove", onMouseMoveBottomResize)
      document.addEventListener("mouseup", onMouseUpBottomResize)
     }

     //left

     const onMouseMoveLeftResize = (event) => {
      const dx =  event.clientX - xCord;
      xCord = event.clientX;
      width = width - dx;
      resizeableElement.style.width = `${width}px`;
     }

     const onMouseUpLeftResize = (event) => {
      document.removeEventListener("mousemove", onMouseMoveLeftResize);
     }

     const onMouseDownLeftResize = (event) => {
      xCord = event.clientX;
      const styles = window.getComputedStyle(resizeableElement);
      resizeableElement.style.right = styles.right;
      resizeableElement.style.left = null;
      document.addEventListener("mousemove", onMouseMoveLeftResize);
      document.addEventListener("mouseup", onMouseUpLeftResize);
     }


     const resizerRight = refRight.current;
     resizerRight.addEventListener("mousedown", onMouseDownRightResize);

     const resizerTop = refTop.current;
     resizerTop.addEventListener("mousedown", onMouseDownTopResize);

     const resizerBottom = refBottom.current;
     resizerBottom.addEventListener("mousedown", onMouseDownBottomResize);

     const resizerLeft = refLeft.current;
     resizerLeft.addEventListener("mousedown", onMouseDownLeftResize);


     return () => {
       resizerRight.removeEventListener("mousedown", onMouseDownRightResize)
       resizerTop.removeEventListener("mousedown", onMouseDownTopResize)
       resizerBottom.removeEventListener("mousedown", onMouseDownBottomResize)
       resizerLeft.removeEventListener("mousedown", onMouseDownLeftResize)
     }
  }, [])

  return (
    <div className='wrapper'>
       <div ref = {refBox} className='resizeable-box'>
         <div ref = {refLeft} className='resizer rl'></div>
         <div ref = {refTop} className='resizer rt'></div>
         <div ref = {refRight} className='resizer rr'></div>
         <div ref = {refBottom} className='resizer rb'></div>
       </div>
    </div>
  )
}

export default Slide






























































*{
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
.wrapper{
  border-radius: 5px;
  width: 100vw;
  height: 100vh;
  background: teal;
  position: relative;
}
.resizeable-box{
  position: absolute;
  border: 2px solid red;
  width: 200px;
  height: 200px;
  border-radius: 3px;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 15px;
  min-height: 15px;
}

.resizer {
  position: absolute;
  background: white;
}

.rr{
  cursor: col-resize;
  height: 100%;
  right: 0;
  top: 0;
  width: 5px;
}

.rt{
  cursor: row-resize;
  height: 5px;
  left: 0;
  top: 0;
  width: 100%;
}

.rb{
  cursor: row-resize;
  height: 5px;
  left: 0;
  bottom: 0;
  width: 100%;
}

.rl{
  cursor: col-resize;
  height: 100%;
  left: 0;
  top: 0;
  width: 5px;
}
  